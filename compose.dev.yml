version: '3.4'
services:

  nginx:
    image: nginx:1.23.3-alpine
    ports:
      - 80:80
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - front
      - api
      - adminer

  front:
    build:
      context: FRONTEND
      target: dev
    restart: always
    volumes:
      - ./FRONTEND/src:/appdev/src

  dbobjects:
    image: maven:3.8.5-openjdk-17
    volumes:
      - maven:/root/.m2
      - ./DBobjects:/app
    command: ["mvn", "install"]
    working_dir: /app

  api:
    image: maven:3.8.5-openjdk-17
    volumes:
      - maven:/root/.m2
      - ./API:/app
    command: ["mvn", "spring-boot:run", "-Dspring-boot.run.profiles=dev"]
    working_dir: /app
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
    depends_on:
      - db

  datahandler:
    image: maven:3.8.5-openjdk-17
    volumes:
      - maven:/root/.m2
      - ./DataHandler:/app
    command: [ "mvn", "spring-boot:run", "-Dspring-boot.run.profiles=dev" ]
    working_dir: /app
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
    depends_on:
      - db
    ports:
      - 8080:8080


  adminer:
    image: adminer
    restart: always

  db:
    image: postgres:15.1-alpine
    volumes:
      - ./db:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
    ports:
      - ${POSTGRES_PORT}:5432

volumes:
  maven: